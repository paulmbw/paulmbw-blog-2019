{"componentChunkName":"component---src-templates-post-template-jsx","path":"/posts/react-hooks/","webpackCompilationHash":"","result":{"data":{"site":{"siteMetadata":{"title":"Paul Waweru","subtitle":"Software Engineer. I love to travel, eat and read (sometimes all at once). North London is Red. Navigating through this thing called life.","copyright":"© Paul Waweru 2019.","author":{"name":"Paul Waweru"},"disqusShortname":"http://paulmbw.me.uk","url":"https://lumen.netlify.com"}},"markdownRemark":{"id":"7f05bbeb-bce6-5315-bb78-13f34467123c","html":"<p><strong>Goal</strong></p>\n<p>In this new post I aim to explain and reinforce my own understand of  <a href=\"https://reactjs.org/docs/hooks-overview.html\">React Hooks</a>, whilst providing a very simple example of its use.</p>\n<p><strong>Prerequisites</strong></p>\n<p>Before diving into the topic, let’s take a brief moment to understand the difference between <em>stateful</em> and <em>functional</em> components in React, as this is key in seeing how Hooks work.</p>\n<p><strong>Stateful vs Functional Components</strong></p>\n<p>If this is all repetition to you, please do skip to the next part. Let’s take a very quick glance at the difference between the two, starting with Stateful components; they do exactly what it says on the tin - components that handle state.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Library</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      availableBooks<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'How To Stop Time'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'The Gustuv Sonata'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here, we have a <code class=\"language-text\">Library</code> class that holds state specific to a list of books available for borrowing. Great! What about  <em>functional</em> components? The key distinction is functional components are responsible for rendering information to the screen only (or in other words, functions that take an optional input and return JSX as an output). Take a look below:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">BookTitle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>The name <span class=\"token keyword\">of</span> the book is <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>bookTitle<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This component is limited to rendering some html only, with <code class=\"language-text\">props</code> passed as a parameter. We would use this component like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>BookTitle bookTitle<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'The Knife of Never Letting Go'</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p><strong>Understanding React Hooks</strong></p>\n<p>So, now that we understand the difference between the two types of components, how does that help with defining Hooks? When building applications in React, you may run into situations where you need to construct a class and identify how to manage state (like the <code class=\"language-text\">Library</code> class we defined earlier). The main goal of Hooks is to allow you to reap the benefits that come with writing functional components, whilst being able to maintain state:</p>\n<ul>\n<li><strong>reduced boilerplate</strong>: quite often,  React components start out as simple and overtime become more complex when state management is involved and side effects are performed. The introduction of component life cycle methods also add to this complexity, as each method handles logic differently. Ultimately, code becomes harder to maintain and reuse. </li>\n<li><strong>learning curve that comes with classes</strong>: for me, learning how the <code class=\"language-text\">this</code> keyword has been quite a challenge when I first got into React, and this may be an even bigger learning curve for those starting out. Functions are far more easier to understand in my opinion.</li>\n<li><strong>we can write more functional code</strong>: a key advantage of using Hooks is the ability to write functional code (no side effects, code is less verbose) whilst maintaining the use of classes. Hooks allow us to use state inside of functional components!</li>\n</ul>\n<p><strong>Okay…but what on earth is a Hook?!</strong></p>\n<p>Thought you’d ask that question! The React <a href=\"https://reactjs.org/docs/hooks-overview.html#but-what-is-a-hook\">docs</a> do a pretty good job explaining what a Hook is:</p>\n<blockquote>\n<p>Hooks are functions that let you “hook into” React state and lifecycle features from function components. Hooks don’t work inside classes — they let you use React without classes. </p>\n</blockquote>\n<p>In other other words, I’ve defined a functional component, but I would now like to introduce some state management without having to refactor my functional component into a class component. Therefore, I am going to use a Hook which will allow me to connect my function to some sort of internal state.</p>\n<p><strong>Cool, what does a Hook look like?</strong></p>\n<p><code class=\"language-text\">useState</code> is an example of a Hook, which is a method that returns a pair; the current state, and a function that will later update the state:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/*\ninitalState can be any value, but for the purpose of this post I will use an array\n*/</span>\n<span class=\"token keyword\">let</span> initalState <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>currentState<span class=\"token punctuation\">,</span> functionToUpdateState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>initalState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Here is a more concrete example relating to our Library:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useRef <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Library</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>books<span class=\"token punctuation\">,</span> setBooks<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'The Kind Worth Killing'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">setBooks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>books<span class=\"token punctuation\">,</span> <span class=\"token string\">'How To Stop Time'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Here, we have <code class=\"language-text\">books</code>(our current state) as the first element in our array, and <code class=\"language-text\">setBooks</code> being the second, which is a function that appends to our initial <code class=\"language-text\">books</code> array.</p>\n<p><strong>Full example</strong></p>\n<p>Below we have a <code class=\"language-text\">Library</code> function that makes use of the <code class=\"language-text\">useState</code> Hook for connecting internal state. This function contains a form which, once submitted, adds a new book to our state and renders a list of books as a result. Let’s take a look:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useRef <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Library</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>books<span class=\"token punctuation\">,</span> setBooks<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'The Kind Worth Killing'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> inputElement <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// used to read the current value in an input field</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">onSubmit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setBooks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>books<span class=\"token punctuation\">,</span> inputElement<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">event</span> <span class=\"token operator\">=></span> <span class=\"token function\">onSubmit</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"field\"</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>label<span class=\"token operator\">></span>Book Name<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>inputElement<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n\n        <span class=\"token operator\">&lt;</span>button<span class=\"token operator\">></span>Add Book<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>\n          books<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">book<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>li key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>book<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Running the application should yield the following result:</p>\n<p><img src=\"/a9931b2c9cd3cd2c2fe7541494c7a0cd/addBook.gif\" alt=\"Alt Text\"></p>\n<p><strong>Conclusion</strong></p>\n<p>The intention of this post was to introduce React Hooks and provide at most a very brief explanation and an example of how to use them. Later on, I will take a deeper dive into this topic, outlining other hooks such as <code class=\"language-text\">useEffect</code> and will provide more examples and real-world use cases. Thanks for tuning in! 🙅🏾‍♂️</p>","fields":{"tagSlugs":["/tags/learning/","/tags/react/"]},"frontmatter":{"title":"React Hooks","tags":["learning","react"],"date":"2019-01-19T23:46:37.121Z","description":"A recent update from the React team introduces Hooks, a neat way of handling state inside of functional components. Curious? Let's take a look!"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/react-hooks/"}}}