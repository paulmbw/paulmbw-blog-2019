{"data":{"site":{"siteMetadata":{"title":"Paul Waweru","subtitle":"Software Engineer. Passion for travel and food. North London is Red. Navigating through this thing called life.","copyright":"© All rights reserved.","author":{"name":"Paul Waweru"},"disqusShortname":"","url":"https://lumen.netlify.com"}},"markdownRemark":{"id":"d931879e-3a04-5727-be9b-02da4d37cf47","html":"<p>In order to understand what GraphQL is, we need to consider the issues presented with previous technologies (in this case RESTful API’s) and what this new language provides as a solution.</p>\n<p>Traditional endpoints usually take the following structure (I will use the context of a book store):</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">http<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>london<span class=\"token operator\">-</span>book<span class=\"token operator\">-</span>store<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>api<span class=\"token operator\">/</span>v1<span class=\"token operator\">/</span>books</code></pre></div>\n<p>Performing a <code class=\"language-text\">GET</code> request to the above endpoint should result in the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"title\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"The Kind Worth Killing\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"genre\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Thriller\"</span>\n    <span class=\"token string\">\"authorId\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"123\"</span>\n    <span class=\"token string\">\"author\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Peter Swanson\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>Great, we have a list of books from the book store, the first being <a href=\"https://www.amazon.co.uk/Kind-Worth-Killing-Peter-Swanson/dp/057130219X\"> <em>The Kind Worth Killing</em></a> (an awesome read! Check it out!).</p>\n<p>What if we wanted more information about the author? Easy, we would just create a new endpoint:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">http<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>london<span class=\"token operator\">-</span>book<span class=\"token operator\">-</span>store<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>api<span class=\"token operator\">/</span>v1<span class=\"token operator\">/</span>authors<span class=\"token operator\">/</span><span class=\"token punctuation\">:</span>authorId</code></pre></div>\n<p>and we should get back the following result:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"authorName\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Peter Swanson\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"location\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"London, United Kingdom\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"prizes\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"LA Times Book Award\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"New England Society Book Award\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Awesome. Hmm, what if I wanted to get more information about other books written by Peter Swanson? Again, we would have to construct a new endpoint to return the desired information. Recognize a pattern here? As each endpoint corresponds to a single entity,  we have to continue to build new endpoints if we require more information, which can often take more time to implement and can also be considered as resource-intensive. </p>\n<p>The other limitation RESTful API’s suffer from is the bloatware that comes with each response. Going back to the previous example, performing a <code class=\"language-text\">GET</code> request to retrieve information about a book returns all the fields pertaining to that request, however, what if we only wanted to know the name and genre of a book? Once more, we would have to implement another endpoint with only the fields we require. </p>\n<p><strong>So where does GraphQL come in?</strong></p>\n<p>Here is the official definition from Wikipedia:</p>\n<blockquote>\n<p>GraphQL is an open-source data query and manipulation language for APIs, and a runtime for fulfilling queries with existing data.</p>\n</blockquote>\n<p>Here is my interpretation! GraphQL is query language that behaves in the same way as traditional RESTful API’s, with the distinction we can <em>declaratively</em> ask for the data we need, all within a single endpoint. Take for instance a request for getting information about a specific book. GraphQL allows us to model what data we’re require, and the response mirrors exactly what has been defined in the request:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">book</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//we are looking for a book object with the id 123</span>\n    title\n    genre\n    releaseDate\n    pages\n    synopsis\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Once a GraphQL server receives this request, it would respond with the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"data\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"book\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"title\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"The Kind Worth Killing\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"genre\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Thriller\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"releaseDate\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"3 February 2015\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"pages\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"260\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"synopsis\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Delayed in London, Ted Severson...\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This is all one HTTP request that can be implemented in an express server, as opposed to defining <em>n</em> number of routes that describe what data will be returned. Moreover, what if we only wanted information about the title and genre of the book? We would simply adjust our query to achieve the desired result:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">book</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    title\n    genre\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"data\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"book\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"title\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"The Kind Worth Killing\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"genre\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Thriller\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Nested Queries</strong></p>\n<p>The wonderful thing about declaratively specifying what information we want is how easy it is to extend our quires and retrieve more data. Our initial query requested information about a book, however, what if we wanted information about the author in addition? Again, we can adjust our query to achieve this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">book</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    title\n    genre\n    author <span class=\"token punctuation\">{</span>\n      name\n      age\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So, what should happen? You guessed it!</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"data\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"book\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"The Kind Worth Killing\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"genre\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Thriller\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"author\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Peter Swanson\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"50\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Modifying data with GraphQL</strong></p>\n<p>You may want to perform operations other than querying data, and GraphQL provides a mechanism called <em>mutations</em> which allow us to do so. Here is a simple implementation for creating a new book entry:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">mutation <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">addBook</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"The Knife of Never Letting Go\"</span><span class=\"token punctuation\">,</span> genre<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Thriller\"</span><span class=\"token punctuation\">,</span> author<span class=\"token punctuation\">:</span><span class=\"token string\">\"Patraick Ness\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    name\n    genre\n    author <span class=\"token punctuation\">{</span>\n      name\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A GraphQL server would interpret this the same way a <code class=\"language-text\">POST</code> request would be performed to create a resource, and the result would look like the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"data\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"addBook\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"The Knife of Never Letting Go\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"genre\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Thriller\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"author\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Patraick Ness\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Is this a good replacement for RESTful API’s?</strong></p>\n<p>From this learning experience, I would definitely advocate for adopting GraphQL; it’s relatively easy to learn, and there are tones of resources to get a proof of concept going (here is a <a href=\"https://www.youtube.com/watch?v=ed8SzALpx1Q&#x26;t=10057s\">4 hour long tutorial</a>, and it’s free!). Instead of calling multiple endpoints to fetch related resources, we can define one endpoint and request whatever information we want, all by adjusting and extending a query by adding/removing fields (as described with quering information about a book and an author).</p>\n<p><strong>Conclusion</strong></p>\n<p>The intention of this post was to give you at most a very brief and simple insight into what exactly GraphQL is and how it’s used. If you’re curios about this topic more, checkout my <a href=\"https://github.com/paulmbw/learning-graphql\">github page</a> which contains a project for creating books and authors (this app is comprised of React and Apollo on the front-end, with Node.js, GraphQL and MongoDB with mLab on the backend).</p>\n<p>If you have any questions, please reach out! I hope you’ve enjoyed reading this post. Tune in again soon for more posts!</p>","fields":{"tagSlugs":["/tags/learning/","/tags/graphql/"]},"frontmatter":{"title":"GraphQL - Is this the end of RESTful API's?","tags":["learning","graphql"],"date":"2019-01-04T23:46:37.121Z","description":"In this post I embark on a journey through understanding and demystifying GraphQL, and I discuss whether this may be a good replacement for traditional RESTFul design. Read and comment!"}}},"pageContext":{"slug":"/posts/learning-graphql/"}}