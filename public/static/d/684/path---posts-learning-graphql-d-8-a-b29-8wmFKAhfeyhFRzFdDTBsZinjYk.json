{"data":{"site":{"siteMetadata":{"title":"Paul Waweru","subtitle":"Software Engineer. Passion for travel and food. North London is Red. Navigating through this thing called life.","copyright":"© All rights reserved.","author":{"name":"Paul Waweru"},"disqusShortname":"","url":"https://lumen.netlify.com"}},"markdownRemark":{"id":"d931879e-3a04-5727-be9b-02da4d37cf47","html":"<p>In order to understand what GraphQL is, we need to consider the issues presented with previous technologies (in this case RESTful API’s) and what this new language provides as a solution.</p>\n<p>Traditional endpoints usually take the following structure (I will use the context of a book store):</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">http<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>london<span class=\"token operator\">-</span>book<span class=\"token operator\">-</span>store<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>api<span class=\"token operator\">/</span>v1<span class=\"token operator\">/</span>books</code></pre></div>\n<p>Performing a <code class=\"language-text\">GET</code> request to the above endpoint should result in the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"title\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"The Kind Worth Killing\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"authorId\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"123\"</span>\n    <span class=\"token string\">\"author\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Peter Swanson\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"genre\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Thriller\"</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>Great, we have a list of books from the book store, the first being  <em>The Kind Worth Killing</em> (which btw, is an awesome book!).</p>\n<p>What if we wanted more information about the author? Easy, we would just create a new endpoint:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">http<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>london<span class=\"token operator\">-</span>book<span class=\"token operator\">-</span>store<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>api<span class=\"token operator\">/</span>v1<span class=\"token operator\">/</span>authors<span class=\"token operator\">/</span><span class=\"token punctuation\">:</span>authorId</code></pre></div>\n<p>and we should get back the following result:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"authorName\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Peter Swanson\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"location\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"London, United Kingdom\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"prizes\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"LA Times Book Award\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"New England Society Book Award\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Awesome. Hmm, what if I wanted to get more information about other books written by Peter Swanson? Again, we would have to construct a new endpoint to return the desired information. Recognize a pattern here? As each endpoint corresponds to a single entity,  we have to continue to build new endpoints if we require more information, which can often take more time to implement and can also be considered as resource-intensive. </p>\n<p>The other limitation RESTful API’s suffer from is the bloatware that comes with each response. Going back to the previous example, performing a <code class=\"language-text\">GET</code> request to retrieve information about a book returns all the fields pertaining to that request, however, what if we only wanted to know the name and genre of a book? Once more, we would have to implement another endpoint with only the fields we require. </p>\n<p><strong>So where does GraphQL come in?</strong></p>\n<p>GraphQL is query language that behaves in the same way as traditional RESTful API’s, with the distinction we can <em>declaratively</em> ask for the data we need, all within a single endpoint. Take for instance a request for getting information about a specific book. GraphQL allows us to model what data we’re require, and the response mirrors exactly what has been defined in the request:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">book</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//we are looking for a book object with the id 123</span>\n    title\n    genre\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Once a GraphQL server receives this request, it would respond with the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"data\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"book\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"The Kind Worth Killing\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"genre\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Thriller\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"5c2b93f10d51d345ae11b9f5\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This is all one HTTP request from Graphql, rather than sending <em>n</em> number of requests to gather the same information.</p>\n<p>The second problem GraphQL solves is it provides the ability to query only the information we need. For instance, if we didn’t care for the reviews of the books, location and prizes of the author, we would simply adjust our query </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">book</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    title\n    genre\n    author <span class=\"token punctuation\">{</span>\n      name<span class=\"token punctuation\">,</span>\n      books <span class=\"token punctuation\">{</span>\n        name\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>and the output would be the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"data\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"book\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"The Kind Worth Killing\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"genre\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Thriller\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"123\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here is the official definition from Wikipedia:</p>\n<blockquote>\n<p>GraphQL is an open-source data query and manipulation language for APIs, and a runtime for fulfilling queries with existing data.</p>\n</blockquote>\n<p>A query language used to communicate data between a client (i.e. the browser) and the server.</p>\n<p><strong>What are mutations in GraphQL?</strong></p>\n<p>Performing operations such as creating, updating and deleting resources in a database (or whatever data source in question) are called <em>mutations</em> (sensibly). Here is an example for creating a new author:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">mutation <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">addAuthor</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Paul Waweru\"</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> location<span class=\"token punctuation\">:</span> <span class=\"token string\">\"North London\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">,</span> \n    age<span class=\"token punctuation\">,</span>\n    location\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>with the result:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"data\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"addAuthor\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Paul Waweru\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"23\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"location\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"North London\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span></code></pre></div>","fields":{"tagSlugs":["/tags/learning/","/tags/graphql/"]},"frontmatter":{"title":"GraphQL - Is this the end of RESTful API's?","tags":["learning","graphql"],"date":"2019-01-04T23:46:37.121Z","description":"In this post I embark on a journey through understanding and demystifying Graphql, and I discuess whether this may be a good replacement for traditional RESTFul design. Read and comment!"}}},"pageContext":{"slug":"/posts/learning-graphql/"}}